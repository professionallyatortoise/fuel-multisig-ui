/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider, BaseWalletLocked, AbstractAddress } from "fuels";
import { Interface, Contract } from "fuels";
import type {
  MultisigContractAbi,
  MultisigContractAbiInterface,
} from "../MultisigContractAbi";
const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "[_; 25]",
      components: [
        {
          name: "__array_element",
          type: 14,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "[_; 25]",
      components: [
        {
          name: "__array_element",
          type: 10,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "[_; 2]",
      components: [
        {
          name: "__array_element",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 5,
      type: "bool",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "enum ExecutionError",
      components: [
        {
          name: "IncorrectSignerOrdering",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InsufficientAssetAmount",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InsufficientApprovals",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "enum Identity",
      components: [
        {
          name: "Address",
          type: 9,
          typeArguments: null,
        },
        {
          name: "ContractId",
          type: 11,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "enum InitError",
      components: [
        {
          name: "AddressCannotBeZero",
          type: 0,
          typeArguments: null,
        },
        {
          name: "CannotReinitialize",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotInitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "ThresholdCannotBeZero",
          type: 0,
          typeArguments: null,
        },
        {
          name: "WeightingCannotBeZero",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "struct Address",
      components: [
        {
          name: "value",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 10,
      type: "struct B512",
      components: [
        {
          name: "bytes",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 11,
      type: "struct ContractId",
      components: [
        {
          name: "value",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 12,
      type: "struct ExecutedEvent",
      components: [
        {
          name: "data",
          type: 4,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 15,
          typeArguments: null,
        },
        {
          name: "to",
          type: 7,
          typeArguments: null,
        },
        {
          name: "value",
          type: 15,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 13,
      type: "struct TransferEvent",
      components: [
        {
          name: "asset",
          type: 11,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 15,
          typeArguments: null,
        },
        {
          name: "to",
          type: 7,
          typeArguments: null,
        },
        {
          name: "value",
          type: 15,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 14,
      type: "struct User",
      components: [
        {
          name: "identity",
          type: 9,
          typeArguments: null,
        },
        {
          name: "weight",
          type: 15,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 15,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "asset_id",
          type: 11,
          typeArguments: null,
        },
      ],
      name: "balance",
      output: {
        name: "",
        type: 15,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: "users",
          type: 1,
          typeArguments: null,
        },
        {
          name: "threshold",
          type: 15,
          typeArguments: null,
        },
      ],
      name: "constructor",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: "to",
          type: 7,
          typeArguments: null,
        },
        {
          name: "value",
          type: 15,
          typeArguments: null,
        },
        {
          name: "data",
          type: 4,
          typeArguments: null,
        },
        {
          name: "signatures",
          type: 2,
          typeArguments: null,
        },
      ],
      name: "execute_transaction",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: "user",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "is_owner",
      output: {
        name: "",
        type: 5,
        typeArguments: null,
      },
    },
    {
      inputs: [],
      name: "nonce",
      output: {
        name: "",
        type: 15,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: "to",
          type: 7,
          typeArguments: null,
        },
        {
          name: "value",
          type: 15,
          typeArguments: null,
        },
        {
          name: "data",
          type: 4,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 15,
          typeArguments: null,
        },
      ],
      name: "transaction_hash",
      output: {
        name: "",
        type: 4,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: "to",
          type: 7,
          typeArguments: null,
        },
        {
          name: "asset_id",
          type: 11,
          typeArguments: null,
        },
        {
          name: "value",
          type: 15,
          typeArguments: null,
        },
        {
          name: "data",
          type: 4,
          typeArguments: null,
        },
        {
          name: "signatures",
          type: 2,
          typeArguments: null,
        },
      ],
      name: "transfer",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: [],
      },
    },
    {
      logId: 5,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 6,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 7,
      loggedType: {
        name: "",
        type: 12,
        typeArguments: [],
      },
    },
    {
      logId: 8,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: [],
      },
    },
    {
      logId: 9,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: [],
      },
    },
    {
      logId: 10,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 11,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 12,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 13,
      loggedType: {
        name: "",
        type: 13,
        typeArguments: [],
      },
    },
  ],
};

export class MultisigContractAbi__factory {
  static readonly abi = _abi;
  static createInterface(): MultisigContractAbiInterface {
    return new Interface(_abi) as unknown as MultisigContractAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): MultisigContractAbi {
    return new Contract(
      id,
      _abi,
      walletOrProvider
    ) as unknown as MultisigContractAbi;
  }
}
