/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type UserInput = { identity: AddressInput; weight: BigNumberish };

export type UserOutput = { identity: AddressOutput; weight: BN };

export type B512Input = { bytes: [any, any] };

export type B512Output = { bytes: [any, any] };

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface MultisigContractAbiInterface extends Interface {
  functions: {
    balance: FunctionFragment;
    constructor: FunctionFragment;
    execute_transaction: FunctionFragment;
    is_owner: FunctionFragment;
    nonce: FunctionFragment;
    transaction_hash: FunctionFragment;
    transfer: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balance",
    values: [ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "constructor",
    values: [
      [
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any
      ],
      BigNumberish
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "execute_transaction",
    values: [
      IdentityInput,
      BigNumberish,
      string,
      [
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any
      ]
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "is_owner",
    values: [AddressInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: "transaction_hash",
    values: [IdentityInput, BigNumberish, string, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      IdentityInput,
      ContractIdInput,
      BigNumberish,
      string,
      [
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any
      ]
    ]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "balance",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "constructor",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "execute_transaction",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "is_owner",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "nonce", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "transaction_hash",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer",
    data: BytesLike
  ): DecodedValue;
}

export class MultisigContractAbi extends Contract {
  interface: MultisigContractAbiInterface;
  functions: {
    balance: InvokeFunction<[asset_id: ContractIdInput], BN>;

    constructor: InvokeFunction<
      [
        users: [
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any
        ],
        threshold: BigNumberish
      ],
      void
    >;

    execute_transaction: InvokeFunction<
      [
        to: IdentityInput,
        value: BigNumberish,
        data: string,
        signatures: [
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any
        ]
      ],
      void
    >;

    is_owner: InvokeFunction<[user: AddressInput], boolean>;

    nonce: InvokeFunction<[], BN>;

    transaction_hash: InvokeFunction<
      [
        to: IdentityInput,
        value: BigNumberish,
        data: string,
        nonce: BigNumberish
      ],
      string
    >;

    transfer: InvokeFunction<
      [
        to: IdentityInput,
        asset_id: ContractIdInput,
        value: BigNumberish,
        data: string,
        signatures: [
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any
        ]
      ],
      void
    >;
  };
}
